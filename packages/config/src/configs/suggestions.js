import { jsFiles, tsFiles } from '../constants.js';

/** @type {import('eslint').Linter.FlatConfig} */
const recommended = {
	files: [...tsFiles, ...jsFiles],
	rules: {
		'camelcase': 'error',
		'no-case-declarations': 'error',
		'no-confusing-arrow': 'error',
		'no-console': 'error',
		'no-constant-condition': 'error',
		'no-delete-var': 'error',
		'no-empty': 'error',
		'no-useless-catch': 'error',
		'no-useless-escape': 'error',
		'no-var': 'error',
		'no-with': 'error',
		'object-shorthand': ['error', 'always', {
			avoidQuotes: true,
			ignoreConstructors: false,
		}],
		'prefer-exponentiation-operator': 'error',
		'prefer-rest-params': 'error',
		'prefer-spread': 'error',
		'prefer-template': 'error',
		'quote-props': ['error', 'consistent-as-needed'],
		'require-yield': 'error',
	},
};

/** @type {import('eslint').Linter.FlatConfig} */
const strict = {
	...recommended,
	rules: {
		'accessor-pairs': 'error',
		'arrow-body-style': ['error', 'as-needed'],
		'block-scoped-var': 'error',
		'capitalized-comments': 'error',
		'complexity': ['error', 10],
		'consistent-return': 'error',
		'consistent-this': 'error',
		'default-case': 'error',
		'default-case-last': 'error',
		'eqeqeq': 'error',
		'func-name-matching': 'error',
		'func-names': ['error', 'as-needed'],
		'func-style': ['error', 'declaration'],
		'grouped-accessor-pairs': ['error', 'setBeforeGet'],
		'logical-assignment-operators': ['error', 'always', { enforceForIfStatements: true }],
		'max-classes-per-file': ['error', 1],
		'max-depth': ['error', 4],
		'max-lines': ['error', 500],
		'max-lines-per-function': ['error', { max: 60, skipBlankLines: true, skipComments: true }],
		'max-nested-callbacks': ['error', 10],
		'max-params': ['error', 4],
		'max-statements': ['error', 10],
		'multiline-comment-style': ['error', 'starred-block'],
		'new-cap': 'error',
		'no-alert': 'error',
		'no-await-in-loop': 'error',
		'no-bitwise': 'error',
		'no-caller': 'error',
		'no-continue': 'error',
		'no-div-regex': 'error',
		'no-else-return': 'error',
		'no-empty-static-block': 'error',
		'no-eval': 'error',
		'no-extend-native': 'error',
		'no-extra-bind': 'error',
		'no-extra-boolean-cast': 'error',
		'no-extra-parens': ['error', 'all', { nestedBinaryExpressions: true }],
		'no-floating-decimal': 'error',
		'no-implicit-coercion': 'error',
		'no-labels': 'error',
		'no-mixed-operators': 'error',
		'no-multi-assign': 'error',
		'no-multi-str': 'error',
		'no-negated-condition': 'error',
		'no-nested-ternary': 'error',
		'no-new': 'error',
		'no-new-func': 'error',
		'no-new-object': 'error',
		'no-new-wrappers': 'error',
		'no-return-assign': 'error',
		'no-script-url': 'error',
		'no-sequences': 'error',
		'no-undef-init': 'error',
		'no-underscore-dangle': 'error',
		'no-unneeded-ternary': 'error',
		'no-unused-expressions': 'error',
		'no-useless-call': 'error',
		'no-useless-rename': 'error',
		'no-useless-return': 'error',
		'operator-assignment': ['error', 'always'],
		'prefer-arrow-callback': 'error',
		'prefer-const': 'error',
		'prefer-named-capture-group': 'error',
		'prefer-numeric-literals': 'error',
		'prefer-object-has-own': 'error',
		'prefer-object-spread': 'error',
		'prefer-promise-reject-errors': 'error',
		'prefer-regex-literals': 'error',
		'radix': ['error', 'always'],
		'require-unicode-regexp': 'error',
		'symbol-description': 'error',
		'yoda': ['error', 'never'],

		...{}, // Typescript rules
		'@typescript-eslint/class-methods-use-this': 'error',
		'@typescript-eslint/default-param-last': 'error',
		'@typescript-eslint/dot-notation': 'error',
		'@typescript-eslint/no-array-constructor': 'error',
		'@typescript-eslint/no-empty-function': 'error',
		'@typescript-eslint/no-extra-semi': 'error',
		'@typescript-eslint/no-invalid-this': 'error',
		'@typescript-eslint/no-loop-func': 'error',
		'@typescript-eslint/no-shadow': 'error',
		'@typescript-eslint/no-throw-literal': 'error',
		'@typescript-eslint/no-use-before-define': 'error',
		'@typescript-eslint/no-useless-constructor': 'error',
		'@typescript-eslint/require-await': 'error',
		// '@typescript-eslint/no-magic-numbers': ['error'],
		'class-methods-use-this': 'off',
		'default-param-last': 'off',
		'no-array-constructor': 'off',
		'no-empty-function': 'off',
		'no-extra-semi': 'off',
		'no-invalid-this': 'off',
		'no-loop-func': 'off',
		'no-shadow': 'off',
		'no-throw-literal': 'off',
		'no-use-before-defined': 'off',
		'no-useless-constructor': 'off',
		'require-await': 'off',
		// 'no-magic-numbers': 'off',

	},
};

const suggestions = { recommended, strict };
export default suggestions;
