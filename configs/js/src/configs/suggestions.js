/**
 * @file
 * Configuration objects that enforces different ways of coding in JavaScript and TypeScript..
 * See more info on the configs type declaration file.
 * @license MIT
 * @author Guz013 <contact.guz013@gmail.com> (https://guz.one)
 */

/* eslint-disable import/no-relative-parent-imports */
/* eslint-disable unicorn/no-useless-spread */
import { createVariations } from '../lib/rule-variations.js';
import { jsFiles, tsFiles } from '../constants.js';

const recommended = createVariations({
	files: [...tsFiles, ...jsFiles],
	rules: {
		'camelcase': 'error',
		'max-len': ['error', { code: 80, comments: 100, ignoreUrls: true }],
		'no-case-declarations': 'error',
		'no-confusing-arrow': 'error',
		'no-console': 'error',
		'no-constant-condition': 'error',
		'no-delete-var': 'error',
		'no-empty': 'error',
		'no-lonely-if': 'error',
		'no-useless-catch': 'error',
		'no-useless-escape': 'error',
		'no-var': 'error',
		'no-with': 'error',
		'object-shorthand': ['error', 'always', {
			avoidQuotes: true,
			ignoreConstructors: false,
		}],
		'prefer-exponentiation-operator': 'error',
		'prefer-rest-params': 'error',
		'prefer-spread': 'error',
		'prefer-template': 'error',
		'quote-props': ['error', 'consistent-as-needed'],
		'require-yield': 'error',

		...{}, // Plugin: @typescript-eslint/eslint-plugin
		/*
		 * '@typescript-eslint/adjacent-overload-signatures': 'error',
		 * Incompatible with perfectionist/sort-interfaces and
		 * perfectionist/sort-object-types.
		 */
		'@typescript-eslint/array-type': 'error',
		'@typescript-eslint/await-thenable': 'error',
		'@typescript-eslint/ban-ts-comment': 'error',
		'@typescript-eslint/ban-tslint-comment': 'error',
		'@typescript-eslint/ban-types': 'error',
		'@typescript-eslint/class-literal-property-style': 'error',
		'@typescript-eslint/consistent-generic-constructors': 'error',
		// eslint-disable-next-line max-len
		'@typescript-eslint/consistent-indexed-object-style': ['error', 'index-signature'],
		'@typescript-eslint/consistent-type-assertions': 'error',
		'@typescript-eslint/consistent-type-definitions': 'error',
		'@typescript-eslint/no-base-to-string': 'error',
		'@typescript-eslint/no-confusing-non-null-assertion': 'error',
		'@typescript-eslint/no-confusing-void-expression': 'error',
		'@typescript-eslint/no-duplicate-enum-values': 'error',
		'@typescript-eslint/no-duplicate-type-constituents': 'error',
		'@typescript-eslint/no-dynamic-delete': 'error',
		'@typescript-eslint/no-empty-interface': 'error',
		'@typescript-eslint/no-explicit-any': 'error',
		'@typescript-eslint/no-extra-non-null-assertion': 'error',
		'@typescript-eslint/no-extraneous-class': 'error',
		'@typescript-eslint/no-floating-promises': 'error',
		'@typescript-eslint/no-for-in-array': 'error',
		'@typescript-eslint/no-import-type-side-effects': 'error',
		'@typescript-eslint/no-invalid-void-type': 'error',
		'@typescript-eslint/no-meaningless-void-operator': 'error',
		'@typescript-eslint/no-misused-new': 'error',
		'@typescript-eslint/no-misused-promises': 'error',
		'@typescript-eslint/no-mixed-enums': 'error',
		'@typescript-eslint/no-namespace': 'error',
		'@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
		'@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
		'@typescript-eslint/no-non-null-assertion': 'error',
		'@typescript-eslint/no-redundant-type-constituents': 'error',
		'@typescript-eslint/no-require-imports': 'error',
		'@typescript-eslint/no-this-alias': 'error',
		'@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
		'@typescript-eslint/no-unnecessary-condition': 'error',
		'@typescript-eslint/no-unnecessary-type-arguments': 'error',
		'@typescript-eslint/no-unnecessary-type-assertion': 'error',
		'@typescript-eslint/no-unnecessary-type-constraint': 'error',
		'@typescript-eslint/no-unsafe-argument': 'error',
		'@typescript-eslint/no-unsafe-assignment': 'error',
		'@typescript-eslint/no-unsafe-call': 'error',
		'@typescript-eslint/no-unsafe-declaration-merging': 'error',
		'@typescript-eslint/no-unsafe-enum-comparison': 'error',
		'@typescript-eslint/no-unsafe-member-access': 'error',
		'@typescript-eslint/no-unsafe-return': 'error',
		'@typescript-eslint/no-var-requires': 'error',
		'@typescript-eslint/non-nullable-type-assertion-style': 'error',
		'@typescript-eslint/prefer-as-const': 'error',
		'@typescript-eslint/prefer-function-type': 'error',
		'@typescript-eslint/prefer-literal-enum-member': 'error',
		'@typescript-eslint/prefer-namespace-keyword': 'error',
		'@typescript-eslint/prefer-nullish-coalescing': 'error',
		'@typescript-eslint/prefer-optional-chain': 'error',
		'@typescript-eslint/prefer-reduce-type-parameter': 'error',
		'@typescript-eslint/prefer-return-this-type': 'error',
		'@typescript-eslint/prefer-string-starts-ends-with': 'error',
		'@typescript-eslint/prefer-ts-expect-error': 'error',
		'@typescript-eslint/restrict-plus-operands': 'error',
		'@typescript-eslint/restrict-template-expressions': 'error',
		'@typescript-eslint/triple-slash-reference': 'error',
		'@typescript-eslint/unbound-method': 'error',
		'@typescript-eslint/unified-signatures': 'error',

		...{}, // Plugin: eslint-plugin-unicorn
		'unicorn/better-regex': 'error',
		'unicorn/catch-error-name': 'error',
		'unicorn/consistent-destructuring': 'error',
		'unicorn/consistent-function-scoping': 'error',
		'unicorn/empty-brace-spaces': 'error',
		'unicorn/error-message': 'error',
		'unicorn/escape-case': 'error',
		'unicorn/expiring-todo-comments': ['error', {
			allowWarningComments: false,
		}],
		'unicorn/explicit-length-check': 'error',
		'unicorn/new-for-builtins': 'error',
		'unicorn/no-abusive-eslint-disable': 'error',
		'unicorn/no-array-callback-reference': 'error',
		'unicorn/no-array-for-each': 'error',
		'unicorn/no-array-method-this-argument': 'error',
		'unicorn/no-array-push-push': 'error',
		'unicorn/no-array-reduce': 'error',
		'unicorn/no-await-expression-member': 'error',
		'unicorn/no-console-spaces': 'error',
		'unicorn/no-document-cookie': 'error',
		'unicorn/no-empty-file': 'error',
		'unicorn/no-for-loop': 'error',
		'unicorn/no-hex-escape': 'error',
		'unicorn/no-instanceof-array': 'error',
		'unicorn/no-invalid-remove-event-listener': 'error',
		'unicorn/no-lonely-if': 'error',
		'unicorn/no-new-array': 'error',
		'unicorn/no-new-buffer': 'error',
		'unicorn/no-object-as-default-parameter': 'error',
		'unicorn/no-process-exit': 'error',
		'unicorn/no-static-only-class': 'error',
		'unicorn/no-thenable': 'error',
		'unicorn/no-this-assignment': 'error',
		'unicorn/no-typeof-undefined': 'error',
		'unicorn/no-unnecessary-await': 'error',
		'unicorn/no-unreadable-array-destructuring': 'error',
		'unicorn/no-unreadable-iife': 'error',
		'unicorn/no-useless-fallback-in-spread': 'error',
		'unicorn/no-useless-length-check': 'error',
		'unicorn/no-useless-promise-resolve-reject': 'error',
		'unicorn/no-useless-spread': 'error',
		'unicorn/no-useless-switch-case': 'error',
		/*
		 * TODO (@guz013) [>=1.0.0]: 'unicorn/no-useless-undefined' rule
		 * It could be better to use a invert to this rule instead, as
		 * explicity code could be better then implicitly.
		 */
		'unicorn/no-zero-fractions': 'error',
		'unicorn/number-literal-case': 'error',
		'unicorn/numeric-separators-style': 'error',
		'unicorn/prefer-array-find': ['error', { checkFromLast: true }],
		'unicorn/prefer-array-flat': 'error',
		'unicorn/prefer-array-flat-map': 'error',
		'unicorn/prefer-array-index-of': 'error',
		'unicorn/prefer-array-some': 'error',
		'unicorn/prefer-at': 'error',
		'unicorn/prefer-blob-reading-methods': 'error',
		'unicorn/prefer-code-point': 'error',
		'unicorn/prefer-date-now': 'error',
		'unicorn/prefer-default-parameters': 'error',
		'unicorn/prefer-event-target': 'error',
		'unicorn/prefer-export-from': 'error',
		'unicorn/prefer-includes': 'error',
		'unicorn/prefer-logical-operator-over-ternary': 'error',
		'unicorn/prefer-math-trunc': 'error',
		'unicorn/prefer-modern-math-apis': 'error',
		'unicorn/prefer-module': 'error',
		'unicorn/prefer-native-coercion-functions': 'error',
		'unicorn/prefer-negative-index': 'error',
		'unicorn/prefer-number-properties': 'error',
		'unicorn/prefer-optional-catch-binding': 'error',
		'unicorn/prefer-prototype-methods': 'error',
		'unicorn/prefer-reflect-apply': 'error',
		'unicorn/prefer-regexp-test': 'error',
		'unicorn/prefer-set-has': 'error',
		// TODO [>=1.0.0]: Should this be on a "performance" preset?
		'unicorn/prefer-set-size': 'error',
		// TODO [>=1.0.0]: Should this be disabled on a "performance" preset?
		'unicorn/prefer-spread': 'error',
		'unicorn/prefer-string-replace-all': 'error',
		'unicorn/prefer-string-slice': 'error',
		'unicorn/prefer-string-starts-ends-with': 'error',
		'unicorn/prefer-string-trim-start-end': 'error',
		'unicorn/prefer-switch': ['error', {
			emptyDefaultCase: 'do-nothing-comment',
		}],
		'unicorn/prefer-ternary': 'error',
		'unicorn/prefer-top-level-await': 'error',
		'unicorn/prefer-type-error': 'error',
		'unicorn/relative-url-style': 'error',
		'unicorn/require-array-join-separator': 'error',
		'unicorn/require-number-to-fixed-digits-argument': 'error',
		'unicorn/switch-case-braces': 'error',
		'unicorn/text-encoding-identifier-case': 'error',
		'unicorn/throw-new-error': 'error',

		...{}, // Plugin: eslint-plugin-import
		'import/no-amd': 'error',
		'import/no-commonjs': 'error',
		'import/no-deprecated': 'error',
		'import/no-duplicates': 'error',
		'import/no-empty-named-blocks': 'error',
		'import/no-named-as-default': 'error',
		'import/no-named-as-default-member': 'error',
		'import/no-self-import': 'error',
		'import/no-useless-path-segments': 'error',

		...{}, // Plugin: eslint-plugin-jsdoc
		'jsdoc/check-alignment': 'error',
		'jsdoc/check-param-names': 'error',
		'jsdoc/check-property-names': 'error',
		'jsdoc/check-syntax': 'error',
		'jsdoc/check-tag-names': 'error',
		'jsdoc/check-types': 'error',
		'jsdoc/check-values': 'error',
		'jsdoc/empty-tags': 'error',
		'jsdoc/implements-on-classes': 'error',
		'jsdoc/multiline-blocks': 'error',
		'jsdoc/no-multi-asterisks': ['error', { allowWhitespace: true }],
		'jsdoc/require-asterisk-prefix': ['error', 'always'],
		'jsdoc/require-jsdoc': 'error',
		'jsdoc/require-param': 'error',
		'jsdoc/require-param-name': 'error',
		'jsdoc/require-param-type': 'error',
		'jsdoc/require-property': 'error',
		'jsdoc/require-property-name': 'error',
		'jsdoc/require-property-type': 'error',
		'jsdoc/require-returns': 'error',
		'jsdoc/require-returns-check': 'error',
		'jsdoc/require-returns-type': 'error',
		'jsdoc/require-throws': 'error',
		'jsdoc/require-yields': 'error',
		'jsdoc/require-yields-check': 'error',
		'jsdoc/sort-tags': 'error',
		// 'jsdoc/valid-types': 'error', This is already handled by Typescript type checking mostly

	},
});

const strict = createVariations({
	...recommended.error,
	rules: {
		...recommended.error.rules,

		...{}, // ESLint rules
		'accessor-pairs': 'error',
		'arrow-body-style': ['error', 'as-needed'],
		'block-scoped-var': 'error',
		'capitalized-comments': 'error',
		'complexity': ['error', 10],
		'consistent-return': 'error',
		'consistent-this': 'error',
		'default-case': 'error',
		'default-case-last': 'error',
		'eqeqeq': 'error',
		'func-name-matching': 'error',
		'func-names': ['error', 'as-needed'],
		'func-style': ['error', 'declaration'],
		'grouped-accessor-pairs': ['error', 'setBeforeGet'],
		'logical-assignment-operators': ['error', 'always', {
			enforceForIfStatements: true,
		}],
		'max-classes-per-file': ['error', 1],
		'max-depth': ['error', 4],
		'max-lines': ['error', 500],
		'max-lines-per-function': ['error', {
			max: 60,
			skipBlankLines: true,
			skipComments: true,
		}],
		'max-nested-callbacks': ['error', 10],
		'max-params': ['error', 4],
		'max-statements': ['error', 10],
		'multiline-comment-style': ['error', 'starred-block'],
		'new-cap': 'error',
		'no-alert': 'error',
		'no-await-in-loop': 'error',
		'no-bitwise': 'error',
		'no-caller': 'error',
		'no-continue': 'error',
		'no-div-regex': 'error',
		'no-else-return': 'error',
		'no-empty-static-block': 'error',
		'no-eval': 'error',
		'no-extend-native': 'error',
		'no-extra-bind': 'error',
		'no-extra-boolean-cast': 'error',
		'no-extra-parens': ['error', 'all', { nestedBinaryExpressions: true }],
		'no-floating-decimal': 'error',
		'no-implicit-coercion': 'error',
		'no-labels': 'error',
		'no-mixed-operators': 'error',
		'no-multi-assign': 'error',
		'no-multi-str': 'error',
		'no-negated-condition': 'error',
		'no-new': 'error',
		'no-new-func': 'error',
		'no-new-object': 'error',
		'no-new-wrappers': 'error',
		'no-return-assign': 'error',
		'no-script-url': 'error',
		'no-sequences': 'error',
		'no-undef-init': 'error',
		'no-underscore-dangle': 'error',
		'no-unneeded-ternary': 'error',
		'no-unused-expressions': 'error',
		'no-useless-call': 'error',
		'no-useless-rename': 'error',
		'no-useless-return': 'error',
		'operator-assignment': ['error', 'always'],
		'prefer-arrow-callback': 'error',
		'prefer-const': 'error',
		'prefer-named-capture-group': 'error',
		'prefer-numeric-literals': 'error',
		'prefer-object-has-own': 'error',
		'prefer-object-spread': 'error',
		'prefer-promise-reject-errors': 'error',
		'prefer-regex-literals': 'error',
		'radix': ['error', 'always'],
		'require-unicode-regexp': 'error',
		'symbol-description': 'error',
		'yoda': ['error', 'never'],

		...{}, // Plugin: @typescript-eslint/eslint-plugin
		'@typescript-eslint/class-methods-use-this': 'error',
		'@typescript-eslint/consistent-type-exports': ['error', {
			fixMixedExportsWithInlineTypeSpecifier: false,
		}],
		'@typescript-eslint/consistent-type-imports': ['error', {
			disallowTypeAnnotations: true,
			fixStyle: 'separate-type-imports',
			prefer: 'type-imports',
		}],
		'@typescript-eslint/default-param-last': 'error',
		'@typescript-eslint/dot-notation': 'error',
		'@typescript-eslint/method-signature-style': ['error', 'method'],
		'@typescript-eslint/no-array-constructor': 'error',
		'@typescript-eslint/no-empty-function': 'error',
		'@typescript-eslint/no-extra-semi': 'error',
		'@typescript-eslint/no-invalid-this': 'error',
		'@typescript-eslint/no-loop-func': 'error',
		'@typescript-eslint/no-shadow': 'error',
		'@typescript-eslint/no-throw-literal': 'error',
		'@typescript-eslint/no-unnecessary-qualifier': 'error',
		'@typescript-eslint/no-use-before-define': 'error',
		'@typescript-eslint/no-useless-constructor': 'error',
		'@typescript-eslint/no-useless-empty-export': 'error',
		'@typescript-eslint/parameter-properties': 'error',
		'@typescript-eslint/prefer-enum-initializers': 'error',
		'@typescript-eslint/prefer-readonly': 'error',
		'@typescript-eslint/promise-function-async': 'error',
		'@typescript-eslint/require-array-sort-compare': 'error',
		'@typescript-eslint/require-await': 'error',
		'@typescript-eslint/switch-exhaustiveness-check': 'error',
		'@typescript-eslint/typedef': 'error',
		// '@typescript-eslint/no-magic-numbers': ['error'],
		'class-methods-use-this': 'off',
		'default-param-last': 'off',
		'no-array-constructor': 'off',
		'no-empty-function': 'off',
		'no-extra-semi': 'off',
		'no-invalid-this': 'off',
		'no-loop-func': 'off',
		'no-shadow': 'off',
		'no-throw-literal': 'off',
		'no-use-before-defined': 'off',
		'no-useless-constructor': 'off',
		'require-await': 'off',
		// 'no-magic-numbers': 'off',

		...{}, // Plugin: eslint-plugin-unicorn
		'no-nested-ternary': 'off',
		'unicorn/custom-error-definition': 'error',
		'unicorn/no-negated-condition': 'error',
		'unicorn/no-nested-ternary': 'error',
		/*
		 * TODO (@guz013) [>=1.0.0]: 'unicorn/no-null' rule
		 * It could be better to use a invert to this rule instead,
		 * because the null type could be a better representation to
		 * "no value" then undefined.
		 */
		'unicorn/no-unsafe-regex': 'error',
		'unicorn/no-unused-properties': 'error',

		...{}, // Plugin: eslint-plugin-import
		'import/extensions': ['error', 'always', { ignorePackages: true }],
		'import/max-dependencies': ['error', {
			ignoreTypeImports: true,
			max: 10,
		}],
		'import/no-absolute-path': 'error',
		'import/no-anonymous-default-export': 'error',
		'import/no-cycle': 'error',
		'import/no-import-module-exports': 'error',
		'import/no-mutable-exports': 'error',
		'import/no-named-default': 'error',
		'import/no-relative-packages': 'error',
		'import/no-relative-parent-imports': 'error',
		'import/no-unassigned-import': ['error', {
			allow: ['**/*.css', '**/*.scss', '**/*.less'],
		}],
		'import/prefer-default-export': 'error',
		'import/unambiguous': 'error',

		...{}, // Plugin: eslint-plugin-jsdoc
		'jsdoc/check-access': 'error',
		'jsdoc/check-indentation': 'error',
		'jsdoc/informative-docs': 'error',
		'jsdoc/multiline-blocks': ['error', { noSingleLineBlocks: true }],
		'jsdoc/no-bad-blocks': 'error',
		'jsdoc/no-blank-block-descriptions': 'error',
		'jsdoc/no-blank-blocks': 'error',

	},
});

const suggestions = { recommended, strict };
export default suggestions;
