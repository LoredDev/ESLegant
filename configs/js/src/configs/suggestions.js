/* eslint-disable unicorn/no-useless-spread */
import { jsFiles, tsFiles } from '../constants.js';

/**
 * This config suggest alternate ways of doing things in JavaScript and TypeScript
 * Recommended alternative, better for projects in prototyping phases.
 * @type {import('eslint').Linter.FlatConfig}
 */
const recommended = {
	files: [...tsFiles, ...jsFiles],
	rules: {
		'camelcase': 'error',
		'no-case-declarations': 'error',
		'no-confusing-arrow': 'error',
		'no-console': 'error',
		'no-constant-condition': 'error',
		'no-delete-var': 'error',
		'no-empty': 'error',
		'no-lonely-if': 'error',
		'no-useless-catch': 'error',
		'no-useless-escape': 'error',
		'no-var': 'error',
		'no-with': 'error',
		'object-shorthand': ['error', 'always', {
			avoidQuotes: true,
			ignoreConstructors: false,
		}],
		'prefer-exponentiation-operator': 'error',
		'prefer-rest-params': 'error',
		'prefer-spread': 'error',
		'prefer-template': 'error',
		'quote-props': ['error', 'consistent-as-needed'],
		'require-yield': 'error',

		...{}, // Plugin: eslint-plugin-unicorn
		'unicorn/better-regex': 'error',
		'unicorn/catch-error-name': 'error',
		'unicorn/consistent-destructuring': 'error',
		'unicorn/consistent-function-scoping': 'error',
		'unicorn/empty-brace-spaces': 'error',
		'unicorn/error-message': 'error',
		'unicorn/escape-case': 'error',
		'unicorn/expiring-todo-comments': ['error', { allowWarningComments: false }],
		'unicorn/explicit-length-check': 'error',
		'unicorn/new-for-builtins': 'error',
		'unicorn/no-abusive-eslint-disable': 'error',
		'unicorn/no-array-callback-reference': 'error',
		'unicorn/no-array-for-each': 'error',
		'unicorn/no-array-method-this-argument': 'error',
		'unicorn/no-array-push-push': 'error',
		'unicorn/no-array-reduce': 'error',
		'unicorn/no-await-expression-member': 'error',
		'unicorn/no-console-spaces': 'error',
		'unicorn/no-document-cookie': 'error',
		'unicorn/no-empty-file': 'error',
		'unicorn/no-for-loop': 'error',
		'unicorn/no-hex-escape': 'error',
		'unicorn/no-instanceof-array': 'error',
		'unicorn/no-invalid-remove-event-listener': 'error',
		'unicorn/no-lonely-if': 'error',
		'unicorn/no-new-array': 'error',
		'unicorn/no-new-buffer': 'error',
		'unicorn/no-object-as-default-parameter': 'error',
		'unicorn/no-process-exit': 'error',
		'unicorn/no-static-only-class': 'error',
		'unicorn/no-thenable': 'error',
		'unicorn/no-this-assignment': 'error',
		'unicorn/no-typeof-undefined': 'error',
		'unicorn/no-unnecessary-await': 'error',
		'unicorn/no-unreadable-array-destructuring': 'error',
		'unicorn/no-unreadable-iife': 'error',
		'unicorn/no-useless-fallback-in-spread': 'error',
		'unicorn/no-useless-length-check': 'error',
		'unicorn/no-useless-promise-resolve-reject': 'error',
		'unicorn/no-useless-spread': 'error',
		'unicorn/no-useless-switch-case': 'error',
		/*
		 * TODO (@guz013) [>=1.0.0]: 'unicorn/no-useless-undefined' rule
		 * It could be better to use a invert to this rule instead, as
		 * explicity code could be better then implicitly.
		 */
		'unicorn/no-zero-fractions': 'error',
		'unicorn/number-literal-case': 'error',
		'unicorn/numeric-separators-style': 'error',
		'unicorn/prefer-array-find': ['error', { checkFromLast: true }],
		'unicorn/prefer-array-flat': 'error',
		'unicorn/prefer-array-flat-map': 'error',
		'unicorn/prefer-array-index-of': 'error',
		'unicorn/prefer-array-some': 'error',
		'unicorn/prefer-at': 'error',
		'unicorn/prefer-blob-reading-methods': 'error',
		'unicorn/prefer-code-point': 'error',
		'unicorn/prefer-date-now': 'error',
		'unicorn/prefer-default-parameters': 'error',
		'unicorn/prefer-event-target': 'error',
		'unicorn/prefer-export-from': 'error',
		'unicorn/prefer-includes': 'error',
		'unicorn/prefer-logical-operator-over-ternary': 'error',
		'unicorn/prefer-math-trunc': 'error',
		'unicorn/prefer-modern-math-apis': 'error',
		'unicorn/prefer-module': 'error',
		'unicorn/prefer-native-coercion-functions': 'error',
		'unicorn/prefer-negative-index': 'error',
		'unicorn/prefer-number-properties': 'error',
		'unicorn/prefer-optional-catch-binding': 'error',
		'unicorn/prefer-prototype-methods': 'error',
		'unicorn/prefer-reflect-apply': 'error',
		'unicorn/prefer-regexp-test': 'error',
		'unicorn/prefer-set-has': 'error',
		'unicorn/prefer-set-size': 'error', // TODO [>=1.0.0]: Should this be on a "performance" preset?
		'unicorn/prefer-spread': 'error', // TODO [>=1.0.0]: Should this be disabled on a "performance" preset?
		'unicorn/prefer-string-replace-all': 'error',
		'unicorn/prefer-string-slice': 'error',
		'unicorn/prefer-string-starts-ends-with': 'error',
		'unicorn/prefer-string-trim-start-end': 'error',
		'unicorn/prefer-switch': ['error', { emptyDefaultCase: 'do-nothing-comment' }],
		'unicorn/prefer-ternary': 'error',
		'unicorn/prefer-top-level-await': 'error',
		'unicorn/prefer-type-error': 'error',
		'unicorn/relative-url-style': 'error',
		'unicorn/require-array-join-separator': 'error',
		'unicorn/require-number-to-fixed-digits-argument': 'error',
		'unicorn/switch-case-braces': 'error',
		'unicorn/text-encoding-identifier-case': 'error',
		'unicorn/throw-new-error': 'error',
	},
};

/**
 * This config suggest alternate ways of doing things in JavaScript and TypeScript
 * Strict alternative, better for projects in refactoring and/or production phases.
 * @type {import('eslint').Linter.FlatConfig}
 */
const strict = {
	...recommended,
	rules: {
		...recommended.rules,

		...{}, // ESLint rules
		'accessor-pairs': 'error',
		'arrow-body-style': ['error', 'as-needed'],
		'block-scoped-var': 'error',
		'capitalized-comments': 'error',
		'complexity': ['error', 10],
		'consistent-return': 'error',
		'consistent-this': 'error',
		'default-case': 'error',
		'default-case-last': 'error',
		'eqeqeq': 'error',
		'func-name-matching': 'error',
		'func-names': ['error', 'as-needed'],
		'func-style': ['error', 'declaration'],
		'grouped-accessor-pairs': ['error', 'setBeforeGet'],
		'logical-assignment-operators': ['error', 'always', { enforceForIfStatements: true }],
		'max-classes-per-file': ['error', 1],
		'max-depth': ['error', 4],
		'max-lines': ['error', 500],
		'max-lines-per-function': ['error', { max: 60, skipBlankLines: true, skipComments: true }],
		'max-nested-callbacks': ['error', 10],
		'max-params': ['error', 4],
		'max-statements': ['error', 10],
		'multiline-comment-style': ['error', 'starred-block'],
		'new-cap': 'error',
		'no-alert': 'error',
		'no-await-in-loop': 'error',
		'no-bitwise': 'error',
		'no-caller': 'error',
		'no-continue': 'error',
		'no-div-regex': 'error',
		'no-else-return': 'error',
		'no-empty-static-block': 'error',
		'no-eval': 'error',
		'no-extend-native': 'error',
		'no-extra-bind': 'error',
		'no-extra-boolean-cast': 'error',
		'no-extra-parens': ['error', 'all', { nestedBinaryExpressions: true }],
		'no-floating-decimal': 'error',
		'no-implicit-coercion': 'error',
		'no-labels': 'error',
		'no-mixed-operators': 'error',
		'no-multi-assign': 'error',
		'no-multi-str': 'error',
		'no-negated-condition': 'error',
		'no-new': 'error',
		'no-new-func': 'error',
		'no-new-object': 'error',
		'no-new-wrappers': 'error',
		'no-return-assign': 'error',
		'no-script-url': 'error',
		'no-sequences': 'error',
		'no-undef-init': 'error',
		'no-underscore-dangle': 'error',
		'no-unneeded-ternary': 'error',
		'no-unused-expressions': 'error',
		'no-useless-call': 'error',
		'no-useless-rename': 'error',
		'no-useless-return': 'error',
		'operator-assignment': ['error', 'always'],
		'prefer-arrow-callback': 'error',
		'prefer-const': 'error',
		'prefer-named-capture-group': 'error',
		'prefer-numeric-literals': 'error',
		'prefer-object-has-own': 'error',
		'prefer-object-spread': 'error',
		'prefer-promise-reject-errors': 'error',
		'prefer-regex-literals': 'error',
		'radix': ['error', 'always'],
		'require-unicode-regexp': 'error',
		'symbol-description': 'error',
		'yoda': ['error', 'never'],

		...{}, // Plugin: @typescript-eslint/eslint-plugin
		'@typescript-eslint/class-methods-use-this': 'error',
		'@typescript-eslint/default-param-last': 'error',
		'@typescript-eslint/dot-notation': 'error',
		'@typescript-eslint/no-array-constructor': 'error',
		'@typescript-eslint/no-empty-function': 'error',
		'@typescript-eslint/no-extra-semi': 'error',
		'@typescript-eslint/no-invalid-this': 'error',
		'@typescript-eslint/no-loop-func': 'error',
		'@typescript-eslint/no-shadow': 'error',
		'@typescript-eslint/no-throw-literal': 'error',
		'@typescript-eslint/no-use-before-define': 'error',
		'@typescript-eslint/no-useless-constructor': 'error',
		'@typescript-eslint/require-await': 'error',
		// '@typescript-eslint/no-magic-numbers': ['error'],
		'class-methods-use-this': 'off',
		'default-param-last': 'off',
		'no-array-constructor': 'off',
		'no-empty-function': 'off',
		'no-extra-semi': 'off',
		'no-invalid-this': 'off',
		'no-loop-func': 'off',
		'no-shadow': 'off',
		'no-throw-literal': 'off',
		'no-use-before-defined': 'off',
		'no-useless-constructor': 'off',
		'require-await': 'off',
		// 'no-magic-numbers': 'off',

		...{}, // Plugin: eslint-plugin-unicorn
		'no-nested-ternary': 'off',
		'unicorn/custom-error-definition': 'error',
		'unicorn/no-negated-condition': 'error',
		'unicorn/no-nested-ternary': 'error',
		/*
		 * TODO (@guz013) [>=1.0.0]: 'unicorn/no-null' rule
		 * It could be better to use a invert to this rule instead,
		 * because the null type could be a better representation to
		 * "no value" then undefined.
		 */
		'unicorn/no-unsafe-regex': 'error',
		'unicorn/no-unused-properties': 'error',

	},
};

const suggestions = { recommended, strict };
export default suggestions;
